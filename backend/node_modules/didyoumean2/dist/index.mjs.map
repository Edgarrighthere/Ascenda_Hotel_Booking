{"version":3,"file":"index.mjs","sources":["../src/enums/ReturnTypeEnums.ts","../src/enums/ThresholdTypeEnums.ts","../src/lib/fillDefaultOptions.ts","../src/lib/normalizeString.ts","../src/lib/matchItemProcessor.ts","../src/index.ts","../src/lib/getSimilarity.ts","../src/lib/resultProcessor.ts"],"sourcesContent":["export enum ReturnTypeEnums {\n  ALL_CLOSEST_MATCHES = 'all-closest-matches',\n  ALL_MATCHES = 'all-matches',\n  ALL_SORTED_MATCHES = 'all-sorted-matches',\n  FIRST_CLOSEST_MATCH = 'first-closest-match',\n  FIRST_MATCH = 'first-match',\n}\n","export enum ThresholdTypeEnums {\n  EDIT_DISTANCE = 'edit-distance',\n  SIMILARITY = 'similarity',\n}\n","import { ReturnTypeEnums } from '../enums/ReturnTypeEnums.js'\nimport { ThresholdTypeEnums } from '../enums/ThresholdTypeEnums.js'\nimport type { Options } from '../types.js'\n\nconst fillDefaultOptions = (options?: Partial<Options>): Options => {\n  const optionsWithDefaultValues = {\n    caseSensitive: false,\n    deburr: true,\n    matchPath: [],\n    returnType: ReturnTypeEnums.FIRST_CLOSEST_MATCH,\n    thresholdType: ThresholdTypeEnums.SIMILARITY,\n    trimSpaces: true,\n    ...options,\n  }\n\n  if (\n    !Object.values(ReturnTypeEnums).includes(\n      optionsWithDefaultValues.returnType,\n    )\n  ) {\n    throw new TypeError('unknown returnType')\n  }\n  if (\n    !Object.values(ThresholdTypeEnums).includes(\n      optionsWithDefaultValues.thresholdType,\n    )\n  ) {\n    throw new TypeError('unknown thresholdType')\n  }\n\n  switch (optionsWithDefaultValues.thresholdType) {\n    case ThresholdTypeEnums.EDIT_DISTANCE:\n      return {\n        threshold: 20,\n        ...optionsWithDefaultValues,\n      }\n\n    case ThresholdTypeEnums.SIMILARITY:\n      return {\n        threshold: 0.4,\n        ...optionsWithDefaultValues,\n      }\n  }\n}\nexport default fillDefaultOptions\n","import deburr from 'lodash.deburr'\n\nimport type { Options } from '../types.js'\n\n/**\n * Normalize a string\n *\n * @param {string} str - any string\n * @param {object} options - options that allows you to modify the behavior\n * @returns {string} - normalized string\n */\nconst normalizeString = (str: string, options: Options): string => {\n  let s = str\n\n  if (options.trimSpaces) {\n    s = s.trim().replaceAll(/\\s+/gu, ' ')\n  }\n\n  if (options.deburr) {\n    s = deburr(s)\n  }\n\n  if (!options.caseSensitive) {\n    s = s.toLowerCase()\n  }\n\n  return s\n}\n\nexport default normalizeString\n","import type { MatchItem, Options } from '../types.js'\nimport normalizeString from './normalizeString.js'\n\nconst getMatchItemStr = (\n  matchItem: MatchItem,\n  matchPath: Options['matchPath'],\n): string => {\n  const matchItemStr =\n    matchPath.length > 0\n      ? matchPath.reduce<unknown>((acc, prop) => {\n          // @ts-expect-error skip redundant type check\n          return acc?.[prop]\n        }, matchItem)\n      : matchItem\n  if (typeof matchItemStr !== 'string') return ''\n  return matchItemStr\n}\n\n/**\n * Process matchItem according to options\n *\n * @param {object | string} matchItem - Item for matching with `input`\n * @param {object} options - options that allows you to modify the behavior\n * @returns {string} - processed matchItem\n */\nconst matchItemProcessor = (matchItem: MatchItem, options: Options): string => {\n  const { matchPath } = options\n\n  const matchItemStr = getMatchItemStr(matchItem, matchPath)\n\n  return normalizeString(matchItemStr, options)\n}\n\nexport default matchItemProcessor\n","import { distance } from 'fastest-levenshtein'\n\nimport { ReturnTypeEnums } from './enums/ReturnTypeEnums.js'\nimport { ThresholdTypeEnums } from './enums/ThresholdTypeEnums.js'\nimport fillDefaultOptions from './lib/fillDefaultOptions.js'\nimport getSimilarity from './lib/getSimilarity.js'\nimport matchItemProcessor from './lib/matchItemProcessor.js'\nimport normalizeString from './lib/normalizeString.js'\nimport resultProcessor from './lib/resultProcessor.js'\nimport type { MatchItem, Options } from './types.js'\n\nfunction didYouMean<T extends MatchItem>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options?: Partial<Options> & {\n    readonly returnType?:\n      | ReturnTypeEnums.FIRST_CLOSEST_MATCH\n      | ReturnTypeEnums.FIRST_MATCH\n  },\n): T | null\nfunction didYouMean<T extends MatchItem>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options: Partial<Options> & {\n    readonly returnType:\n      | ReturnTypeEnums.ALL_CLOSEST_MATCHES\n      | ReturnTypeEnums.ALL_MATCHES\n      | ReturnTypeEnums.ALL_SORTED_MATCHES\n  },\n  // eslint-disable-next-line functional/prefer-immutable-types\n): T[]\n/**\n * Main function for didyoumean2\n *\n * @param {string} input - string that you are not sure and want to match with `matchList`\n * @param {object[] | string[]} matchList - List for matching with `input`\n * @param {null | object | undefined} options - options that allows you to modify the behavior\n * @returns {Array | null | object | string} - matched result(s), return object if `match` is `{Object[]}`\n */\nfunction didYouMean<T extends MatchItem>(\n  input: string,\n  matchList: ReadonlyArray<T>,\n  options?: Partial<Options>,\n  // eslint-disable-next-line functional/prefer-immutable-types\n): Array<T> | T | null {\n  /*+++++++++++++++++++\n   + Initiate options +\n   +++++++++++++++++++*/\n\n  const optionsWithDefaults = fillDefaultOptions(options)\n\n  const { returnType, threshold, thresholdType } = optionsWithDefaults\n\n  /*++++++++++++++++++++\n   + Deal with options +\n   ++++++++++++++++++++*/\n\n  const normalizedInput = normalizeString(input, optionsWithDefaults)\n\n  let checkIfMatched: (score: number) => boolean // Validate if score is matched\n  let scoreProcessor: (matchItem: T) => number // Get score\n  switch (thresholdType) {\n    case ThresholdTypeEnums.EDIT_DISTANCE:\n      checkIfMatched = (score: number) => score <= threshold\n      scoreProcessor = (matchItem: T) =>\n        distance(\n          normalizedInput,\n          matchItemProcessor(matchItem, optionsWithDefaults),\n        )\n      break\n\n    case ThresholdTypeEnums.SIMILARITY:\n      checkIfMatched = (score: number) => score >= threshold\n      scoreProcessor = (matchItem: T) =>\n        getSimilarity(\n          normalizedInput,\n          matchItemProcessor(matchItem, optionsWithDefaults),\n        )\n      break\n  }\n\n  /*+++++++++++\n   + Matching +\n   +++++++++++*/\n\n  // eslint-disable-next-line functional/prefer-immutable-types\n  const matchedIndexes: number[] = []\n\n  switch (returnType) {\n    case ReturnTypeEnums.ALL_CLOSEST_MATCHES:\n    case ReturnTypeEnums.FIRST_CLOSEST_MATCH: {\n      // eslint-disable-next-line functional/prefer-immutable-types\n      const scores: number[] = []\n\n      let marginValue: number\n      switch (thresholdType) {\n        case ThresholdTypeEnums.EDIT_DISTANCE:\n          // Process score and save the smallest score\n          marginValue = Number.POSITIVE_INFINITY\n          for (const matchItem of matchList) {\n            const score = scoreProcessor(matchItem)\n\n            if (marginValue > score) marginValue = score\n\n            scores.push(score)\n          }\n          break\n\n        case ThresholdTypeEnums.SIMILARITY:\n          // Process score and save the largest score\n          marginValue = 0\n          for (const matchItem of matchList) {\n            const score = scoreProcessor(matchItem)\n\n            if (marginValue < score) marginValue = score\n\n            scores.push(score)\n          }\n          break\n      }\n\n      for (const [i, score] of scores.entries()) {\n        if (checkIfMatched(score) && score === marginValue) {\n          matchedIndexes.push(i)\n        }\n      }\n\n      break\n    }\n\n    case ReturnTypeEnums.ALL_MATCHES:\n      for (const [i, matchItem] of matchList.entries()) {\n        const score = scoreProcessor(matchItem)\n\n        // save all indexes of matched scores\n        if (checkIfMatched(score)) {\n          matchedIndexes.push(i)\n        }\n      }\n\n      break\n\n    case ReturnTypeEnums.ALL_SORTED_MATCHES: {\n      // eslint-disable-next-line functional/prefer-immutable-types\n      const unsortedResults: Readonly<{\n        score: number\n        index: number\n      }>[] = []\n      for (const [i, matchItem] of matchList.entries()) {\n        const score = scoreProcessor(matchItem)\n\n        // save all indexes of matched scores\n        if (checkIfMatched(score)) {\n          unsortedResults.push({\n            score,\n            index: i,\n          })\n        }\n      }\n\n      switch (thresholdType) {\n        case ThresholdTypeEnums.EDIT_DISTANCE:\n          unsortedResults.sort((a, b) => a.score - b.score)\n          break\n\n        case ThresholdTypeEnums.SIMILARITY:\n          unsortedResults.sort((a, b) => b.score - a.score)\n          break\n      }\n\n      for (const unsortedResult of unsortedResults) {\n        matchedIndexes.push(unsortedResult.index)\n      }\n\n      break\n    }\n\n    case ReturnTypeEnums.FIRST_MATCH:\n      for (const [i, matchItem] of matchList.entries()) {\n        const score = scoreProcessor(matchItem)\n\n        // Return once matched, performance is main target in this returnType\n        if (checkIfMatched(score)) {\n          matchedIndexes.push(i)\n          break\n        }\n      }\n\n      break\n  }\n\n  /*+++++++++++++++++++++++\n   + Process return value +\n   +++++++++++++++++++++++*/\n\n  return resultProcessor(matchList, matchedIndexes, returnType)\n}\n\nexport default didYouMean\n\nexport { ReturnTypeEnums } from './enums/ReturnTypeEnums.js'\nexport { ThresholdTypeEnums } from './enums/ThresholdTypeEnums.js'\n","import { distance } from 'fastest-levenshtein'\n\n/**\n * Using edit distance between `a` and `b` to calculate similarity\n *\n * @param {string} a - `input`\n * @param {string} b - String from `matchList`\n * @returns {number} similarity between `a` and `b`\n */\nconst getSimilarity = (a: string, b: string): number => {\n  if (!a || !b) return 0\n  if (a === b) return 1\n\n  const editDistance = distance(a, b)\n  const longestLength = Math.max(a.length, b.length)\n\n  return (longestLength - editDistance) / longestLength\n}\n\nexport default getSimilarity\n","import { ReturnTypeEnums } from '../enums/ReturnTypeEnums.js'\n\n/**\n * Generate result\n *\n * @param {object[] | string[]} matchList - List for matching with `input`\n * @param {number[]} matchedIndexes - indexes of matchList that need to be returned as result\n * @param {ReturnTypeEnums} returnType - how the result will response to user\n * @returns {Array | null | object | string} - matched result(s), return object if `match` is `{Object[]}`\n */\nconst resultProcessor = <T>(\n  matchList: ReadonlyArray<T>,\n  matchedIndexes: ReadonlyArray<number>,\n  returnType: ReturnTypeEnums,\n  // eslint-disable-next-line functional/prefer-immutable-types\n): Array<T> | T | null => {\n  switch (returnType) {\n    case ReturnTypeEnums.ALL_CLOSEST_MATCHES:\n    case ReturnTypeEnums.ALL_MATCHES:\n    case ReturnTypeEnums.ALL_SORTED_MATCHES:\n      return matchedIndexes.map((matchedIndex) => matchList[matchedIndex]!)\n\n    case ReturnTypeEnums.FIRST_CLOSEST_MATCH:\n    case ReturnTypeEnums.FIRST_MATCH: {\n      const matchedIndex = matchedIndexes[0]\n      if (matchedIndex === undefined) return null\n      return matchList[matchedIndex]!\n    }\n  }\n}\n\nexport default resultProcessor\n"],"names":["ReturnTypeEnums","ThresholdTypeEnums","normalizeString","str","options","s","trimSpaces","trim","replaceAll","deburr","caseSensitive","toLowerCase","matchItemProcessor","matchItem","matchPath","matchItemStr","getMatchItemStr","length","reduce","acc","prop","didYouMean","input","matchList","optionsWithDefaults","optionsWithDefaultValues","returnType","FIRST_CLOSEST_MATCH","thresholdType","SIMILARITY","Object","values","includes","TypeError","EDIT_DISTANCE","threshold","fillDefaultOptions","normalizedInput","checkIfMatched","scoreProcessor","score","distance","getSimilarity","a","b","editDistance","longestLength","Math","max","matchedIndexes","ALL_CLOSEST_MATCHES","scores","marginValue","Number","POSITIVE_INFINITY","push","i","entries","ALL_MATCHES","ALL_SORTED_MATCHES","unsortedResults","index","sort","unsortedResult","FIRST_MATCH","resultProcessor","map","matchedIndex","undefined"],"mappings":"4EAAYA,IAAAA,WAAAA,GAAe,OAAfA,EAAe,oBAAA,sBAAfA,EAAe,YAAA,cAAfA,EAAe,mBAAA,qBAAfA,EAAe,oBAAA,sBAAfA,EAAe,YAAA,cAAfA,CAAe,EAAA,CAAA,GCAfC,WAAAA,GAAkB,OAAlBA,EAAkB,cAAA,gBAAlBA,EAAkB,WAAA,aAAlBA,CAAkB,EAAA,CAAA,GCI9B,MCOMC,EAAkBA,CAACC,EAAaC,KACpC,IAAIC,EAAIF,EAcR,OAZIC,EAAQE,aACVD,EAAIA,EAAEE,OAAOC,WAAW,QAAS,MAG/BJ,EAAQK,SACVJ,EAAII,EAAOJ,IAGRD,EAAQM,gBACXL,EAAIA,EAAEM,eAGDN,CAAC,ECDJO,EAAqBA,CAACC,EAAsBT,KAChD,MAAMU,UAAEA,GAAcV,EAEhBW,EAzBgBC,EACtBH,EACAC,KAEA,MAAMC,EACJD,EAAUG,OAAS,EACfH,EAAUI,QAAgB,CAACC,EAAKC,IAEvBD,IAAMC,IACZP,GACHA,EACN,MAA4B,iBAAjBE,EAAkC,GACtCA,CAAY,EAaEC,CAAgBH,EAAWC,GAEhD,OAAOZ,EAAgBa,EAAcX,EAAQ,ECS/C,SAASiB,EACPC,EACAC,EACAnB,GAOA,MAAMoB,EH7CoBpB,KAC1B,MAAMqB,EAA2B,CAC/Bf,eAAe,EACfD,QAAQ,EACRK,UAAW,GACXY,WAAY1B,EAAgB2B,oBAC5BC,cAAe3B,EAAmB4B,WAClCvB,YAAY,KACTF,GAGL,IACG0B,OAAOC,OAAO/B,GAAiBgC,SAC9BP,EAAyBC,YAG3B,MAAM,IAAIO,UAAU,sBAEtB,IACGH,OAAOC,OAAO9B,GAAoB+B,SACjCP,EAAyBG,eAG3B,MAAM,IAAIK,UAAU,yBAGtB,OAAQR,EAAyBG,eAC/B,KAAK3B,EAAmBiC,cACtB,MAAO,CACLC,UAAW,MACRV,GAGP,KAAKxB,EAAmB4B,WACtB,MAAO,CACLM,UAAW,MACRV,GAET,EGO4BW,CAAmBhC,IAEzCsB,WAAEA,EAAUS,UAAEA,EAASP,cAAEA,GAAkBJ,EAM3Ca,EAAkBnC,EAAgBoB,EAAOE,GAE/C,IAAIc,EACAC,EACJ,OAAQX,GACN,KAAK3B,EAAmBiC,cACtBI,EAAkBE,GAAkBA,GAASL,EAC7CI,EAAkB1B,GAChB4B,EACEJ,EACAzB,EAAmBC,EAAWW,IAElC,MAEF,KAAKvB,EAAmB4B,WACtBS,EAAkBE,GAAkBA,GAASL,EAC7CI,EAAkB1B,GChEF6B,EAACC,EAAWC,KAChC,IAAKD,IAAMC,EAAG,OAAO,EACrB,GAAID,IAAMC,EAAG,OAAO,EAEpB,MAAMC,EAAeJ,EAASE,EAAGC,GAC3BE,EAAgBC,KAAKC,IAAIL,EAAE1B,OAAQ2B,EAAE3B,QAE3C,OAAQ6B,EAAgBD,GAAgBC,CAAa,ED0D/CJ,CACEL,EACAzB,EAAmBC,EAAWW,IAUtC,MAAMyB,EAA2B,GAEjC,OAAQvB,GACN,KAAK1B,EAAgBkD,oBACrB,KAAKlD,EAAgB2B,oBAAqB,CAExC,MAAMwB,EAAmB,GAEzB,IAAIC,EACJ,OAAQxB,GACN,KAAK3B,EAAmBiC,cAEtBkB,EAAcC,OAAOC,kBACrB,IAAK,MAAMzC,KAAaU,EAAW,CACjC,MAAMiB,EAAQD,EAAe1B,GAEzBuC,EAAcZ,IAAOY,EAAcZ,GAEvCW,EAAOI,KAAKf,EACd,CACA,MAEF,KAAKvC,EAAmB4B,WAEtBuB,EAAc,EACd,IAAK,MAAMvC,KAAaU,EAAW,CACjC,MAAMiB,EAAQD,EAAe1B,GAEzBuC,EAAcZ,IAAOY,EAAcZ,GAEvCW,EAAOI,KAAKf,EACd,EAIJ,IAAK,MAAOgB,EAAGhB,KAAUW,EAAOM,UAC1BnB,EAAeE,IAAUA,IAAUY,GACrCH,EAAeM,KAAKC,GAIxB,KACF,CAEA,KAAKxD,EAAgB0D,YACnB,IAAK,MAAOF,EAAG3C,KAAcU,EAAUkC,UAAW,CAI5CnB,EAHUC,EAAe1B,KAI3BoC,EAAeM,KAAKC,EAExB,CAEA,MAEF,KAAKxD,EAAgB2D,mBAAoB,CAEvC,MAAMC,EAGC,GACP,IAAK,MAAOJ,EAAG3C,KAAcU,EAAUkC,UAAW,CAChD,MAAMjB,EAAQD,EAAe1B,GAGzByB,EAAeE,IACjBoB,EAAgBL,KAAK,CACnBf,QACAqB,MAAOL,GAGb,CAEA,OAAQ5B,GACN,KAAK3B,EAAmBiC,cACtB0B,EAAgBE,MAAK,CAACnB,EAAGC,IAAMD,EAAEH,MAAQI,EAAEJ,QAC3C,MAEF,KAAKvC,EAAmB4B,WACtB+B,EAAgBE,MAAK,CAACnB,EAAGC,IAAMA,EAAEJ,MAAQG,EAAEH,QAI/C,IAAK,MAAMuB,KAAkBH,EAC3BX,EAAeM,KAAKQ,EAAeF,OAGrC,KACF,CAEA,KAAK7D,EAAgBgE,YACnB,IAAK,MAAOR,EAAG3C,KAAcU,EAAUkC,UAAW,CAIhD,GAAInB,EAHUC,EAAe1B,IAGF,CACzBoC,EAAeM,KAAKC,GACpB,KACF,CACF,EASJ,MEzLsBS,EACtB1C,EACA0B,EACAvB,KAGA,OAAQA,GACN,KAAK1B,EAAgBkD,oBACrB,KAAKlD,EAAgB0D,YACrB,KAAK1D,EAAgB2D,mBACnB,OAAOV,EAAeiB,KAAKC,GAAiB5C,EAAU4C,KAExD,KAAKnE,EAAgB2B,oBACrB,KAAK3B,EAAgBgE,YAAa,CAChC,MAAMG,EAAelB,EAAe,GACpC,YAAqBmB,IAAjBD,EAAmC,KAChC5C,EAAU4C,EACnB,EACF,EFuKOF,CAAgB1C,EAAW0B,EAAgBvB,EACpD"}