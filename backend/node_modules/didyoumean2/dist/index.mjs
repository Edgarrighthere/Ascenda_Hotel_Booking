import{distance as e}from"fastest-levenshtein";import t from"lodash.deburr";let s=function(e){return e.ALL_CLOSEST_MATCHES="all-closest-matches",e.ALL_MATCHES="all-matches",e.ALL_SORTED_MATCHES="all-sorted-matches",e.FIRST_CLOSEST_MATCH="first-closest-match",e.FIRST_MATCH="first-match",e}({}),r=function(e){return e.EDIT_DISTANCE="edit-distance",e.SIMILARITY="similarity",e}({});const c=(e,s)=>{let r=e;return s.trimSpaces&&(r=r.trim().replaceAll(/\s+/gu," ")),s.deburr&&(r=t(r)),s.caseSensitive||(r=r.toLowerCase()),r},o=(e,t)=>{const{matchPath:s}=t,r=((e,t)=>{const s=t.length>0?t.reduce(((e,t)=>e?.[t]),e):e;return"string"!=typeof s?"":s})(e,s);return c(r,t)};function n(t,n,T){const a=(e=>{const t={caseSensitive:!1,deburr:!0,matchPath:[],returnType:s.FIRST_CLOSEST_MATCH,thresholdType:r.SIMILARITY,trimSpaces:!0,...e};if(!Object.values(s).includes(t.returnType))throw new TypeError("unknown returnType");if(!Object.values(r).includes(t.thresholdType))throw new TypeError("unknown thresholdType");switch(t.thresholdType){case r.EDIT_DISTANCE:return{threshold:20,...t};case r.SIMILARITY:return{threshold:.4,...t}}})(T),{returnType:S,threshold:h,thresholdType:i}=a,u=c(t,a);let I,A;switch(i){case r.EDIT_DISTANCE:I=e=>e<=h,A=t=>e(u,o(t,a));break;case r.SIMILARITY:I=e=>e>=h,A=t=>((t,s)=>{if(!t||!s)return 0;if(t===s)return 1;const r=e(t,s),c=Math.max(t.length,s.length);return(c-r)/c})(u,o(t,a))}const l=[];switch(S){case s.ALL_CLOSEST_MATCHES:case s.FIRST_CLOSEST_MATCH:{const e=[];let t;switch(i){case r.EDIT_DISTANCE:t=Number.POSITIVE_INFINITY;for(const s of n){const r=A(s);t>r&&(t=r),e.push(r)}break;case r.SIMILARITY:t=0;for(const s of n){const r=A(s);t<r&&(t=r),e.push(r)}}for(const[s,r]of e.entries())I(r)&&r===t&&l.push(s);break}case s.ALL_MATCHES:for(const[e,t]of n.entries()){I(A(t))&&l.push(e)}break;case s.ALL_SORTED_MATCHES:{const e=[];for(const[t,s]of n.entries()){const r=A(s);I(r)&&e.push({score:r,index:t})}switch(i){case r.EDIT_DISTANCE:e.sort(((e,t)=>e.score-t.score));break;case r.SIMILARITY:e.sort(((e,t)=>t.score-e.score))}for(const t of e)l.push(t.index);break}case s.FIRST_MATCH:for(const[e,t]of n.entries()){if(I(A(t))){l.push(e);break}}}return((e,t,r)=>{switch(r){case s.ALL_CLOSEST_MATCHES:case s.ALL_MATCHES:case s.ALL_SORTED_MATCHES:return t.map((t=>e[t]));case s.FIRST_CLOSEST_MATCH:case s.FIRST_MATCH:{const s=t[0];return void 0===s?null:e[s]}}})(n,l,S)}export{s as ReturnTypeEnums,r as ThresholdTypeEnums,n as default};
//# sourceMappingURL=index.mjs.map
